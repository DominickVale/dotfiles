[Commands]
1\Command="copyq:\n/**\n * Normalize text replacing initial characters to tabs\n * Replace first '#' with ''\n * Then convert 2 spaces to tab and '#' to tab\n * @param text Text\n*/\nfunction normalizeText(text) {\n  text = text.replace(/^\\# ?/gm, '');\n  text = text.replace(/(  |\\# ?)/gm, '\\t');\n  return text;\n}\n\n/**\n * Get number of tabs\n * @param line Line\n */\nfunction getTabs(line) {\n  return (line.match(/^\\t+/g) || []).toString().length;\n}\n\n/**\n * Search last node with specific key and value\n * @param nodes Array of nodes\n * @param key Key\n * @param value Value\n */\nfunction lastIndexOf(nodes, key, value) {\n  for (var i = nodes.length - 1; i >= 0; i--) {\n    if (nodes[i][key] == value) {\n      return i;\n    }\n  }\n  return -1;\n}\n\n/**\n * Print father's children\n * @param children Array of children\n * @param tabs Initial indentation\n */\nfunction printChildren(children, tabs) {\n  var numberChildren = children.length;\n  var child = {}, childTabs = '', string = '';\n\n  if (numberChildren == 0)\n    return;\n\n  for (var i = 0; i < numberChildren; i++) {\n    child = nodes[children[i]];\n\n    // Print tabs\n    string = tabs;\n\n    // Check if is the last child\n    // Print tree and get child tabs\n    if (i == numberChildren - 1) {\n      string += lastElement;\n      childTabs = tabs + '   ';\n    } else {\n      string += intermediateElement;\n      childTabs = tabs + verticalElement + '  ';\n    }\n\n    // Print node string\n    string += child.string + '\\n';\n\n    tree += string;\n\n    printChildren(child.children, childTabs)\n  }\n}\n\nvar verticalElement = '\x2502';\nvar lastElement = '\x2514\x2500 ';\nvar intermediateElement = '\x251c\x2500 ';\n\nvar tree = '';\nvar text = str(read(currentItem()));\nvar lines = [], line = '';\nvar nodes = [], node = {};\nvar length = 0, tabs = -1, father = {}, fatherTabs = -1;\nvar rootElement = dialog('.title', 'Root element', 'Root element name?', '.');\nvar offset = 0;\n\n// Normalize text\ntext = normalizeText(text);\n\n// Get lines\nlines = text.split(/\\r?\\n/);\n\n// Add root element\nif (rootElement) {\n  offset = 1;\n  nodes.push({\n    index: 0,\n    tabs: 0,\n    father: null,\n    children: [],\n    string: rootElement\n  });\n}\n\n// Main loop\nfor (var i = 0; i < lines.length; i++) {\n  // Clear\n  node = {};\n  tabs = -1;\n  father = null;\n  fatherTabs = -1;\n  line = lines[i];\n\n  // Get number of tabs\n  tabs = getTabs(line) + offset;\n\n  // Search father\n  if (tabs > 0) {\n    // Father's tabs\n    fatherTabs = tabs - 1;\n\n    // Read last node that have the number of tabs\n    father = nodes[lastIndexOf(nodes, 'tabs', fatherTabs)];\n\n    // Add child index to fathers node\n    if (father !== undefined) {\n      father.children.push(i + offset);\n    }\n  }\n\n  // Add node\n  node.index = i + offset;\n  node.tabs = tabs;\n  node.father = father ? father.index : null;\n  node.children = [];\n  node.string = line.trim();\n  nodes.push(node);\n}\n\n// Print tree\nfor (var i = 0; i < nodes.length; i++) {\n  node = nodes[i];\n  if(node.tabs !== 0)\n    continue;\n  tree += node.string + '\\n';\n  printChildren(node.children, '');\n}\n\n// Remove whitespace characters\ntree = tree.trim();\n\n// Create html\nvar html = '<html><body><div style=\"font-family: Consolas;font-weight: normal;font-size: 14px;line-height: 19px;white-space: pre;\">' + escapeHtml(tree) + '</div></body></html>';\n\n// Write\nwrite(mimeText, tree, mimeHtml, html);"
1\Icon=\xf1bb
1\InMenu=true
1\Name=Treefy
10\Command=copyq: plugins.itemtags.untag()
10\Icon=\xf02b
10\InMenu=true
10\Input=application/x-copyq-tags
10\InternalId=copyq_tags_untag
10\Name=Remove a Tag
11\Command=copyq: plugins.itemtags.clearTags()
11\Icon=\xf02b
11\InMenu=true
11\Input=application/x-copyq-tags
11\InternalId=copyq_tags_clear
11\Name=Clear all tags
2\Command="copyq:\nvar suffices = {\n  'image/svg': 'svg',\n  'image/png': 'png',\n  'image/jpeg': 'jpg',\n  'image/jpg': 'jpg',\n  'image/bmp': 'bmp',\n  'text/html': 'html',\n  'text/plain' : 'txt',\n}\nfunction hasSuffix(fileName)\n{\n  return /\\.[0-9a-zA-z]+$/.test(fileName);\n}\nfunction addSuffix(fileName, format)\n{\n  var suffix = suffices[format]\n  return suffix ? fileName + \".\" + suffix : fileName\n}\nfunction filterFormats(format)\n{\n  return /^[a-z]/.test(format) && !/^application\\/x/.test(format)\n}\nfunction itemFormats(row)\n{\n  return str(read('?', row))\n    .split('\\n')\n    .filter(filterFormats)\n}\nfunction formatPriority(format)\n{\n  var k = Object.keys(suffices);\n  var i = k.indexOf(format);\n  return i === -1 ? k.length : i\n}\nfunction reorderFormats(formats)\n{\n  formats.sort(function(lhs, rhs){\n    var i = formatPriority(lhs);\n    var j = formatPriority(rhs);\n    return i === j ? lhs.localeCompare(rhs) : i - j;\n  })\n}\nif (selectedtab()) tab(selectedtab())\nvar row = selectedtab() ? currentitem() : -1\nvar formats = itemFormats(row)\nreorderFormats(formats)\ncurrentpath(Dir().homePath())\nvar defaultFileName = 'untitled'\nvar keyFormat = 'Format'\nvar keyFileName = 'File'\nvar defaultFormat = formats[0]\nvar result = dialog(\n  '.title', 'Save Item As...',\n  '.width', 250,\n  keyFormat, [defaultFormat].concat(formats),\n  keyFileName, File(defaultFileName)\n) || abort()\nvar fileName = result[keyFileName]\nvar format = result[keyFormat]\nif (!format || !fileName)\n  abort()\nif (!hasSuffix(fileName))\n  fileName = addSuffix(fileName, format)\nvar f = File(fileName)\nif (!f.open()) {\n  popup('Failed to open \"' + f.fileName() + '\"', f.errorString())\n  abort()\n}\nf.write(selectedtab() ? getitem(currentitem())[format] : clipboard(format))\npopup(\"Item Saved\", 'Item saved as \"' + f.fileName() + '\".')"
2\Icon=\xf0c7
2\InMenu=true
2\Name=Save As...
2\Shortcut=ctrl+s
3\Command=copyq: plugins.itempinned.pin()
3\Icon=\xf08d
3\InMenu=true
3\Input=!OUTPUT
3\InternalId=copyq_pinned_pin
3\Name=Pin
3\Output=application/x-copyq-item-pinned
4\Command=copyq: plugins.itempinned.unpin()
4\Icon=\xf08d
4\InMenu=true
4\Input=application/x-copyq-item-pinned
4\InternalId=copyq_pinned_unpin
4\Name=Unpin
5\Command=copyq: plugins.itemtags.tag(decodeURIComponent('Important'))
5\Icon=\xf02b
5\InMenu=true
5\InternalId=copyq_tags_tag:Important
5\MatchCommand=copyq: plugins.itemtags.hasTag(decodeURIComponent('Important')) && fail()
5\Name=Tag as \x201cImportant\x201d
6\Command=copyq: plugins.itemtags.untag(decodeURIComponent('Important'))
6\Icon=\xf02b
6\InMenu=true
6\InternalId=copyq_tags_untag:Important
6\MatchCommand=copyq: plugins.itemtags.hasTag(decodeURIComponent('Important')) || fail()
6\Name=Remove tag \x201cImportant\x201d
7\Command=copyq: plugins.itemtags.tag()
7\Icon=\xf02b
7\InMenu=true
7\InternalId=copyq_tags_tag
7\Name=Add a Tag
8\Automatic=true
8\Command=bash:\nrefresh-wlcopy
8\Icon=\xf15b
8\Input=image/png
8\Name=refresh wlcopy
9\Command=copyq:\nselect(currentItem())\nexecute(\"refresh-wlcopy\")\nhide()
9\InMenu=true
9\Name=Select and refresh
9\Shortcut=ctrl+return
size=11
